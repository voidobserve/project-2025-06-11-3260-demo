C51 COMPILER V9.60.7.0   ADC                                                               07/03/2025 16:22:49 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\adc.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) INC
                    -DIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware;..\..\Lowpower) INTERVAL(3) DEBUG OBJECTEXTEND PRIN
                    -T(.\Release\Listings\adc.lst) OBJECT(.\Release\Objects\adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          // volatile u16 adc_val = 0;
   4          
   5          void adc_config(void)
   6          { 
   7   1          P1_MD1 |= GPIO_P16_MODE_SEL(0x03); // 模拟模式
   8   1          P2_MD0 |= GPIO_P22_MODE_SEL(0x03);// 模拟模式
   9   1       
  10   1      
  11   1          ADC_CFG1 |= (0x0F << 3); // ADC时钟分频为16分频，为系统时钟/16
  12   1          ADC_CFG2 = 0xFF;         // 通道0采样时间配置为256个采样时钟周期
  13   1      
  14   1          ADC_ACON1 &= ~((0x01 << 5) |   /* 关闭ADC外部参考选择信号 */
  15   1                         (0x07 << 0));   /* 清空ADC内部参考电压的选择配置 */
  16   1          ADC_ACON1 |= (0x01 << 6) |     /* 使能adc内部参考 */
  17   1                       (0x03 << 3) |     /* 关闭测试信号 */
  18   1                       (0x03 << 0);      /* 选择 内部 3.0V 作为参考电压 */
  19   1          ADC_ACON0 = ADC_CMP_EN(0x1) |  // 打开ADC中的CMP使能信号
  20   1                      ADC_BIAS_EN(0x1) | // 打开ADC偏置电流能使信号
  21   1                      ADC_BIAS_SEL(0x1); // 偏置电流选择：1x
  22   1          ADC_TRGS0 |= (0x07 << 4);      // 通道 0DLY 的 ADC 时钟个数选择，配置为 4n+1，4 * 29 + 1
  23   1          ADC_CHS0 |= (0x01 << 6);       // 使能 通道 0DLY 功能
  24   1      }
  25          
  26          void adc_sel_pin(u8 adc_pin)
  27          {
  28   1          ADC_CFG0 &= ~((0x01 << 6) | (0x01 << 3)); // 关闭adc，不使能通道0转换
  29   1          ADC_CHS0 &= ~((0x01 << 7) |               /* 数据格式左对齐 */
  30   1                        (0x01 << 5) |               // 选择内部通道
  31   1                        (0x01 << 4) |
  32   1                        (0x01 << 3) |
  33   1                        (0x01 << 2) |
  34   1                        (0x01 << 1) |
  35   1                        (0x01 << 0)); // 选择外部通路，清空选择的adc0通路
  36   1      
  37   1          if (ADC_SEL_PIN_GET_CHARGE == adc_pin) // 采集充电电压
  38   1          { 
  39   2              ADC_CHS0 |= (0x0E << 0); // P16 对应的模拟通道 
  40   2          }
  41   1          else if (ADC_SEL_PIN_GET_BAT == adc_pin) // 采集电池电压
  42   1          {
  43   2              ADC_CHS0 |= (0x12 << 0); // P22 对应的模拟通道 
  44   2          }
  45   1      
  46   1          ADC_CFG0 |= ADC_CHAN0_EN(0x1) | // 使能通道0转换
  47   1                      ADC_EN(0x1);        // 使能A/D转换
  48   1          delay_ms(1);                    // 等待adc稳定
  49   1      }
  50          
  51          // adc采集+滤波
  52          u16 adc_getval(void)
  53          {
C51 COMPILER V9.60.7.0   ADC                                                               07/03/2025 16:22:49 PAGE 2   

  54   1          u8 i = 0; // adc采集次数的计数
  55   1          volatile u16 g_temp_value = 0;
  56   1          volatile u32 g_tmpbuff = 0;
  57   1          volatile u16 g_adcmax = 0;
  58   1          volatile u16 g_adcmin = 0xFFFF;
  59   1      
  60   1          // 采集20次，去掉前两次采样，再去掉一个最大值和一个最小值，再取平均值
  61   1          for (i = 0; i < 20; i++)
  62   1          {
  63   2              ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
  64   2              while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
  65   2                  ;                                                 // 等待转换完成
  66   2              g_temp_value = (ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4); // 读取 channel0 的值
  67   2              ADC_STA = ADC_CHAN0_DONE(0x1);                        // 清除ADC0转换完成标志位
  68   2      
  69   2              if (i < 2)
  70   2                  continue; // 丢弃前两次采样的
  71   2              if (g_temp_value > g_adcmax)
  72   2                  g_adcmax = g_temp_value; // 最大
  73   2              if (g_temp_value < g_adcmin)
  74   2                  g_adcmin = g_temp_value; // 最小
  75   2      
  76   2              g_tmpbuff += g_temp_value;
  77   2          }
  78   1      
  79   1          g_tmpbuff -= g_adcmax;           // 去掉一个最大
  80   1          g_tmpbuff -= g_adcmin;           // 去掉一个最小
  81   1          g_temp_value = (g_tmpbuff >> 4); // 除以16，取平均值
  82   1      
  83   1          return g_temp_value;
  84   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
