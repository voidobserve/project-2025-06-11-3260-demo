C51 COMPILER V9.60.7.0   TMR3                                                              06/06/2024 17:04:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR3
OBJECT MODULE PLACED IN .\Release\Objects\tmr3.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr3.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware;..\..\Lowpower) INTERVAL(3) DEBUG OBJECTEXTEND PRI
                    -NT(.\Release\Listings\tmr3.lst) TABS(2) OBJECT(.\Release\Objects\tmr3.obj)

line level    source

   1          // 定时器TMR3的驱动源文件
   2          #include "tmr3.h"
   3          
   4          // 定时器TMR3的计时周期，也是中断触发周期（每隔多久触发一次中断）
   5          // 计时周期不能大于65535，因为TMR3存放计时周期的寄存器只有16位
   6          // 0.65625 * 15238 约等于 10000，即定时器每 10000us（10ms） 触发一次中断
   7          // 实际上还需要调整，它的时钟不是很准确，因为不是晶振提供的，而是RC振荡提供的
   8          // #define TMR3_CNT_TIME ((15100))
   9          
  10          #define TMR3_CNT_TIME 15200 // 15200 * 0.65625us 约等于10000us，10ms
  11          
  12          volatile u32 tmr3_cnt = 0; // 定时器TMR3的计数值（每次在中断服务函数中会加一）
  13          // volatile bit tmr3_flag = 0; // tmr3中断服务函数中会置位的标志位
  14          
  15          // 定时器TMR3的初始化（初始化完成后，默认是关闭的）
  16          void tmr3_config(void)
  17          {
  18   1          __SetIRQnIP(TMR3_IRQn, TMR3_IQn_CFG); // 设置中断优先级（TMR3）
  19   1      
  20   1          TMR3_CONL &= ~TMR_PRESCALE_SEL(0x07); // 清除TMR3的预分频配置寄存器
  21   1          // 配置TMR3的预分频，为32分频，即21MHz / 32 = 0.65625MHz，约0.65625us计数一次
  22   1          // （实际测试和计算得出这个系统时钟是21MHz的，但是还是有些误差）
  23   1          TMR3_CONL |= TMR_PRESCALE_SEL(0x05);
  24   1          TMR3_CONL &= ~TMR_MODE_SEL(0x03); // 清除TMR3的模式配置寄存器
  25   1          TMR3_CONL |= TMR_MODE_SEL(0x01);  // 配置TMR3的模式为计数器模式，最后对系统时钟的脉冲进行计数
  26   1      
  27   1          TMR3_CONH &= ~TMR_PRD_PND(0x01); // 清除TMR3的计数标志位，表示未完成计数
  28   1          TMR3_CONH |= TMR_PRD_IRQ_EN(1);  // 使能TMR3的计数中断
  29   1      
  30   1          __DisableIRQ(TMR3_IRQn); // 禁用中断
  31   1      
  32   1          // 配置TMR3的计数周期
  33   1          TMR3_PRL = (unsigned char)(TMR3_CNT_TIME % 255);
  34   1          TMR3_PRH = (unsigned char)(TMR3_CNT_TIME / 255);
  35   1      
  36   1          // 清除TMR3的计数值
  37   1          TMR3_CNTL = 0;
  38   1          TMR3_CNTH = 0;
  39   1      
  40   1          TMR3_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR3的时钟源配置寄存器
  41   1          // TMR3_CONL |= TMR_SOURCE_SEL(0x07); // 配置TMR3的时钟源，使用系统时钟
  42   1          TMR3_CONL |= TMR_SOURCE_SEL(0x05); // 配置TMR3的时钟源，不用任何时钟
  43   1          // __EnableIRQ(TMR3_IRQn);         // 使能中断
  44   1          IE_EA = 1; // 打开总中断
  45   1      }
  46          
  47          // 开启定时器TMR3，开始计时
  48          void tmr3_enable(void)
  49          {
  50   1          // 重新给TMR3配置时钟
  51   1          TMR3_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  52   1          TMR3_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟（约21MHz）
  53   1      
C51 COMPILER V9.60.7.0   TMR3                                                              06/06/2024 17:04:34 PAGE 2   

  54   1          __EnableIRQ(TMR3_IRQn); // 使能中断
  55   1          IE_EA = 1;              // 打开总中断
  56   1      }
  57          
  58          // 关闭定时器，清空计数值
  59          void tmr3_disable(void)
  60          {
  61   1          // 不给定时器提供时钟，让它停止计数
  62   1          TMR3_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  63   1          TMR3_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
  64   1      
  65   1          // 清除定时器的计数值
  66   1          TMR3_CNTL = 0;
  67   1          TMR3_CNTH = 0;
  68   1      
  69   1          __DisableIRQ(TMR3_IRQn); // 关闭中断（不使能中断）
  70   1      }
  71          
  72          // TMR3中断服务函数
  73          void TIMR3_IRQHandler(void) interrupt TMR3_IRQn
  74          {
  75   1      #if 1 // 定时器的定时中断
  76   1          // 进入中断设置IP，不可删除
  77   1          __IRQnIPnPush(TMR3_IRQn);
  78   1      
  79   1          // ---------------- 用户函数处理 -------------------
  80   1          // 周期中断
  81   1          if (TMR3_CONH & TMR_PRD_PND(0x1))
  82   1          {
  83   2              TMR3_CONH |= TMR_PRD_PND(0x1); // 清除pending
  84   2      
  85   2              tmr3_cnt++; 
  86   2          }
  87   1      
  88   1          // 退出中断设置IP，不可删除
  89   1          __IRQnIPnPop(TMR3_IRQn);
  90   1      #endif
  91   1      
  92   1      #if 0 // 定时器的输入捕获中断
              
                  // 进入中断设置IP，不可删除
                  __IRQnIPnPush(TMR3_IRQn);
              
                  // ---------------- 用户函数处理 -------------------
              
                  if (TMR3_CONH & TMR_CAP_PND(0x1))
                  {
                      TMR3_CONH |= TMR_CAP_PND(0x1); // 清除pending
              
                      tmr3_cap_val    = ((TMR3_PWMH << 8) | TMR3_PWML); // 读取捕获的值
                      tmr3_cnt++; // 脉冲计数值加一
              
                      TMR_ALLCON = TMR3_CNT_CLR(0x1); // 清除计数值
                  }
              
                  // 退出中断设置IP，不可删除
                  __IRQnIPnPop(TMR3_IRQn);
              
              #endif
 113   1      }


C51 COMPILER V9.60.7.0   TMR3                                                              06/06/2024 17:04:34 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    187    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
