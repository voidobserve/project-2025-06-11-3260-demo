C51 COMPILER V9.60.7.0   TMR4                                                              12/09/2024 15:08:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR4
OBJECT MODULE PLACED IN .\Release\Objects\tmr4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr4.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware;..\..\Lowpower) INTERVAL(3) DEBUG OBJECTEXTEND PRI
                    -NT(.\Release\Listings\tmr4.lst) OBJECT(.\Release\Objects\tmr4.obj)

line level    source

   1          #include "tmr4.h"
   2          
   3          #define TMR4_CNT_TIME (SYSCLK / 32 / 1000 - 1) // 计数周期 1KHz，1ms产生一次中断
   4          
   5          volatile u32 tmr4_cnt = 0; // 定时器TMR4的计数值（每次在中断服务函数中会加一）
   6          // volatile bit tmr4_flag = 0; // tmr4中断服务函数中会置位的标志位
   7          
   8          
   9          // 定时器TMR4的初始化（初始化完成后，默认是关闭的）
  10          void tmr4_config(void)
  11          {
  12   1          __EnableIRQ(TMR4_IRQn);                                   // 打开TIMER4模块中断
  13   1          TMR_ALLCON = TMR4_CNT_CLR(0x1);                           // Timer4 计数清零
  14   1          TMR4_CAP10 = TMR4_PRD_VAL_L((TMR4_CNT_TIME >> 0) & 0xFF); // 周期低八位寄存器
  15   1          TMR4_CAP11 = TMR4_PRD_VAL_H((TMR4_CNT_TIME >> 8) & 0xFF); // 周期高八位寄存器
  16   1          TMR4_CON0 = TMR4_PRESCALE_SEL(0x05) |                     // 32分频
  17   1                      TMR4_SOURCE_SEL(0x7) |                        // 计数源选择系统时钟
  18   1                      TMR4_MODE_SEL(0x0);                           // 计数模式
  19   1          TMR4_IE0 = TMR4_PRD_IRQ_EN(0x1);                          // 使能计数值等于周期值中断
  20   1          TMR4_EN = TMR4_EN(0x0);                                   // 不使能定时器
  21   1      
  22   1          IE_EA = 1; // 使能总中断
  23   1      }
  24          
  25          // 开启定时器TMR4，开始计时
  26          void tmr4_enable(void)
  27          {
  28   1          TMR4_EN = TMR4_EN(0x1); // 使能定时器
  29   1      }
  30          
  31          // 关闭定时器，清空计数值
  32          void tmr4_disable(void)
  33          {
  34   1          TMR4_EN = TMR4_EN(0x0);         // 不使能定时器
  35   1          TMR_ALLCON = TMR4_CNT_CLR(0x1); // Timer4 计数清零
  36   1      }
  37          
  38          // TMR4中断服务函数
  39          void TIMR4_IRQHandler(void) interrupt TMR4_IRQn
  40          {
  41   1      
  42   1          // 进入中断设置IP，不可删除
  43   1          __IRQnIPnPush(TMR4_IRQn);
  44   1      
  45   1          // ---------------- 用户函数处理 -------------------
  46   1          // 计数值等于周期值中断
  47   1          if (TMR4_FLAG0 & TMR4_PRD_FLAG(0x1))
  48   1          {
  49   2              TMR4_CLR0 |= TMR4_PRD_FLG_CLR(0x1);
  50   2      
  51   2              tmr4_cnt++;
  52   2      
  53   2              // P24 = ~P24; // 测试用，看看中断触发时间是否一致
C51 COMPILER V9.60.7.0   TMR4                                                              12/09/2024 15:08:46 PAGE 2   

  54   2          }
  55   1      
  56   1          
  57   1      
  58   1          // 退出中断设置IP，不可删除
  59   1          __IRQnIPnPop(TMR4_IRQn);
  60   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    112    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
