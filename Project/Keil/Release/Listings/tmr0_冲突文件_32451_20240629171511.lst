C51 COMPILER V9.60.7.0   TMR0                                                              06/06/2024 17:04:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR0
OBJECT MODULE PLACED IN .\Release\Objects\tmr0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr0.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware;..\..\Lowpower) INTERVAL(3) DEBUG OBJECTEXTEND PRI
                    -NT(.\Release\Listings\tmr0.lst) TABS(2) OBJECT(.\Release\Objects\tmr0.obj)

line level    source

   1          #include "tmr0.h"
   2          
   3          #define TMR0_CNT_TIME 152 // 152 * 0.65625us 约等于100us
   4          
   5          // volatile bit tmr0_flag = 0; // tmr0中断服务函数中会置位的标志位
   6          volatile u32 tmr0_cnt = 0;            // 定时器TMR0的计数值（每次在中断服务函数中会加一）
   7          
   8          /**
   9           * @brief 配置定时器TMR0
  10           */
  11          void tmr0_config(void)
  12          {
  13   1          __SetIRQnIP(TMR0_IRQn, TMR0_IQn_CFG); // 设置中断优先级（TMR0）
  14   1      
  15   1          TMR0_CONL &= ~TMR_PRESCALE_SEL(0x03); // 清除TMR0的预分频配置寄存器
  16   1          // 配置TMR0的预分频，为32分频，即21MHz / 32 = 0.65625MHz，约0.67us计数一次
  17   1          // （实际测试和计算得出这个系统时钟是21MHz的，但是还是有些误差，不是准确的21MHz）
  18   1          TMR0_CONL |= TMR_PRESCALE_SEL(0x05);
  19   1          TMR0_CONL &= ~TMR_MODE_SEL(0x03); // 清除TMR0的模式配置寄存器
  20   1          TMR0_CONL |= TMR_MODE_SEL(0x01);  // 配置TMR0的模式为计数器模式，最后对系统时钟的脉冲进行计数
  21   1      
  22   1          TMR0_CONH &= ~TMR_PRD_PND(0x01); // 清除TMR0的计数标志位，表示未完成计数
  23   1          TMR0_CONH |= TMR_PRD_IRQ_EN(1);  // 使能TMR0的计数中断
  24   1      
  25   1          // 配置TMR0的计数周期
  26   1          TMR0_PRL = (unsigned char)(TMR0_CNT_TIME % 255);
  27   1          TMR0_PRH = (unsigned char)(TMR0_CNT_TIME / 255);
  28   1      
  29   1          // 清除TMR0的计数值
  30   1          TMR0_CNTL = 0;
  31   1          TMR0_CNTH = 0;
  32   1      
  33   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR0的时钟源配置寄存器
  34   1          // TMR0_CONL |= TMR_SOURCE_SEL(0x07); // 配置TMR0的时钟源，使用系统时钟
  35   1          TMR0_CONL |= TMR_SOURCE_SEL(0x05); // 配置TMR0的时钟源，不用任何时钟
  36   1                                             // __EnableIRQ(TMR0_IRQn);        // 使能中断
  37   1      
  38   1          __DisableIRQ(TMR0_IRQn); // 禁用中断
  39   1          IE_EA = 1;               // 打开总中断
  40   1      }
  41          
  42          /**
  43           * @brief 开启定时器TMR0，开始计时
  44           */
  45          void tmr0_enable(void)
  46          {
  47   1          // 重新给TMR0配置时钟
  48   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  49   1          TMR0_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟（约21MHz）
  50   1      
  51   1          __EnableIRQ(TMR0_IRQn); // 使能中断
  52   1          IE_EA = 1;              // 打开总中断
  53   1      }
C51 COMPILER V9.60.7.0   TMR0                                                              06/06/2024 17:04:34 PAGE 2   

  54          
  55          /**
  56           * @brief 关闭定时器0，清空计数值
  57           */
  58          void tmr0_disable(void)
  59          {
  60   1          // 不给定时器提供时钟，让它停止计数
  61   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  62   1          TMR0_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
  63   1      
  64   1          // 清除定时器的计数值
  65   1          TMR0_CNTL = 0;
  66   1          TMR0_CNTH = 0;
  67   1      
  68   1          __DisableIRQ(TMR0_IRQn); // 关闭中断（不使能中断）
  69   1      }
  70          
  71          // TMR0中断服务函数
  72          void TIMR0_IRQHandler(void) interrupt TMR0_IRQn
  73          {
  74   1          // 进入中断设置IP，不可删除
  75   1          __IRQnIPnPush(TMR0_IRQn);
  76   1      
  77   1          // ---------------- 用户函数处理 -------------------
  78   1      
  79   1          // 周期中断
  80   1          if (TMR0_CONH & TMR_PRD_PND(0x1))
  81   1          {
  82   2              TMR0_CONH |= TMR_PRD_PND(0x1); // 清除pending
  83   2      
  84   2              tmr0_cnt++;
  85   2      
  86   2              // P11 = ~P11; // 测试用，看看中断触发周期是否正确
  87   2      
  88   2      #if 0
                      // 如果到了5s
                      if (TMR0_cnt == 1000)
                      {
                          TMR0_cnt = 0;
                          TMR0_flag = 1; // 给对应的标志位置一
                      }
              #endif
  96   2          }
  97   1      
  98   1          // 退出中断设置IP，不可删除
  99   1          __IRQnIPnPop(TMR0_IRQn);
 100   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
